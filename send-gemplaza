getgenv().Setting = {
    ["Account Send"] = { "thirt8ik", "HarrisonGlenn84", "under1xa" },
    ["Min Gem To Send"] = "100m",
    ["Url Webhook"] =
    "https://discord.com/api/webhooks/1336358658791051427/e7AlUb4LPd-Nee9xYoCoY2TFza_lhXIVYqhOzs7p0N8XfnFLPeW1hV54LgfAdlvNaHK-",
    ["Url Webhook Plaza"] =
    "https://discord.com/api/webhooks/1340304329101283388/rPUeyHOojfXcpLq3eMDQPS-9MNKnLay_NbYeWf-TAZY5SaBji6HegAJ2dGLsBLmcXDpG",
    ["Rap Pet Normal"] = 0.7,
    ["Skip Pet"] = { "Huge Hell Chest Mimic", "Huge Raining Love Dog", "Huge Prison Cat", "Huge Robber Pug", "Huge Masked Blobfish" }, -- Nhap pet kh muon ban
    ["Rap Huge"] = 0.6,
    ["Rap Huge Normal"] = 0.9,
    ["Custom Item"] = {
        ["Cupids Egg"] = 0.8,
        ["Huge Egg"] = 0.9,
        ["Hype Egg"] = 0.95,
        ["Magma Egg"] = 0.9,
        ["Heartbreak Egg"] = 0.75,
        ["Heartbreak Present"] = 0.85,
        ["Valentines Spinny Wheel Ticket"] = 0.85,
        -- ["HeartBreak God Potion"] = 0.9,
        -- ["Crystal Key Lower Half"] = 0.4,
        ["Crystal Key"] = 0.9,
        ["Blossom Koi Fish"] = 0.65,
        ["Flex Fluffy Cat"] = 0.65,
        ["Sapphire Phoenix"] = 0.65,
        ["Detective Terrier"] = 0.65,
        ["Robber Cat"] = 0.65,
        ["Huge Hell Chest Mimic"] = 0.4,
        ["Huge Raining Love Dog"] = 0.85,
        ["Huge Prison Cat"] = 0.8,
        ["Huge Robber Pug"] = 0.8,
        ["Huge Masked Blobfish"] = 0.8,
        ["Thieving God Potion"] = 0.7,
        ["Thieving Gift Bag"] = 0.8,
        ["Thieving Egg"] = 0.6,
        ["1x Thieving Egg"] = 0.4,
        ["10x Thieving Egg"] = 0.4,
        ["100x Thieving Egg"] = 0.5,
        ["10000x Thieving Egg"] = 0.7,
        ["Exotic Thieving Chest"] = 0.7,
        ["Legendary Thieving Chest"] = 0.7,
        ["Emerald Lockpick"] = 0.7,
        ["Diamond Lockpick"] = 0.7,
        ["Exclusive Lockpick"] = 0.7,
    },
    ["Time to remove item booth"] = 5 -- Minutes
}
getgenv().data = {
    ["2m"] = "1k",
}

repeat
    wait()
until game:IsLoaded() and game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("GUIFX Holder") and
    game:GetService("Players").LocalPlayer.PlayerGui["GUIFX Holder"].DisplayOrder == 999
local rs = game:GetService("ReplicatedStorage")
local save = require(rs.Library.Client.Save)
local Items = require(game:GetService("ReplicatedStorage").Library.Items.Types)
local plr = game.Players.LocalPlayer
local RAP = 0
local a = require(game:GetService("ReplicatedStorage").Library.Directory.Pets)

local VirtualUser = game:service "VirtualUser"
game:service("Players").LocalPlayer.Idled:connect(
    function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end
)
local savepet = {}
local v0 = {
    k = "e3",
    m = "e6",
    b = "e9",
    t = "e12",
    q = "e15"
};
ParseNumberSmart = function(v1)
    if type(v1) == "string" then
        v1 = v1:gsub("[,%s%c%z]", "");
        if #v1 > 0 then
            local v2 = v0[v1:sub(#v1):lower()];
            if v2 then
                v1 = v1:sub(1, #v1 - 1) .. v2;
            end;
        end;
    end;
    return (tonumber(v1));
end;
function formatNumber(v)
    return tostring(v):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "")
end

local function loggem(user, gem)
    local Message = {
        ['username'] = "Pet GO Log",
        ["content"] = "@everyone\nUserName: " .. user .. "\nSend Done: " .. gem

    }
    local DataCallBack = request({
        Url = getgenv().Setting["Url Webhook"],
        Method = 'POST',
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = game:GetService("HttpService"):JSONEncode(Message)
    })
end

local function logplaza(item, rap, value)
    local Message = {
        ['username'] = "Pet GO Log",
        ["content"] = "Start Sell Item: " ..
            item .. "\nRap Item: " .. formatNumber(rap) .. "\nSell Value: " .. formatNumber(value),

    }
    local DataCallBack = request({
        Url = getgenv().Setting["Url Webhook Plaza"],
        Method = 'POST',
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = game:GetService("HttpService"):JSONEncode(Message)
    })
end

function havebooth()
    for i, v in next, workspace.__THINGS.Booths:GetChildren() do
        if v:GetAttribute("Owner") == plr.UserId then
            return true
        end
    end
end

if game.PlaceId == 19006211286 then
    spawn(function()
        while wait() do
            for i, v in pairs(save.Get().Inventory.Currency) do
                if v.id == "Diamonds" and v._am >= ParseNumberSmart(getgenv().Setting["Min Gem To Send"]) then
                    local args = {
                        [1] = getgenv().Setting["Account Send"][math.random(1, #getgenv().Setting["Account Send"])],
                        [2] = "Send Gem",
                        [3] = "Currency",
                        [4] = tostring(i),
                        [5] = v._am
                    }
                    if game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send")
                        :InvokeServer(
                            unpack(args)) then
                        loggem(getgenv().Setting["Account Send"][math.random(1, #getgenv().Setting["Account Send"])],
                            formatNumber(v._am))
                    end
                end
            end
        end
    end)
    wait(1)
    repeat wait() until havebooth()
    for i, v in next, workspace.__THINGS.Booths:GetChildren() do
        if v:GetAttribute("Owner") == plr.UserId then
            for i1, v1 in next, v.Pets.BoothTop.PetScroll:GetChildren() do
                if v1:IsA("Frame") then
                    local args = {
                        [1] = v1.Name
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_RemoveListing")
                        :InvokeServer(
                            unpack(args))
                end
            end
        end
    end
    spawn(function()
        while wait(getgenv().Setting["Time to remove item booth"] * 60) do
            for i, v in next, workspace.__THINGS.Booths:GetChildren() do
                if v:GetAttribute("Owner") == plr.UserId then
                    for i1, v1 in next, v.Pets.BoothTop.PetScroll:GetChildren() do
                        if v1:IsA("Frame") then
                            local args = {
                                [1] = v1.Name
                            }

                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild(
                                "Booths_RemoveListing")
                                :InvokeServer(
                                    unpack(args))
                        end
                    end
                end
            end
        end
    end)

    while wait() do
        --//huge
        for uid, petData in save.Get().Inventory.Pet do
            if string.find(petData.id, "Huge") and not table.find(getgenv().Setting["Skip Pet"], petData.id) then
                local petItem = Items.Types["Pet"]:Get(uid)

                local petRAP = petItem:GetRAP() or 0
                if petData.sh then
                    if (tonumber(petRAP) > 1000) then
                        local args = {
                            [1] = tostring(uid),
                            [2] = math.floor(petRAP * getgenv().Setting["Rap Huge"]),
                            [3] = petData._am or 1
                        }
                        if game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_CreateListing")
                            :InvokeServer(unpack(args)) then
                            logplaza(petData.id, petRAP, math.floor(petRAP * getgenv().Setting["Rap Huge"]))
                        end
                        wait(1)
                    else
                        if savepet[petData.id] and savepet[petData.id].Rate and not table.find(getgenv().Setting["Skip Pet"], petData.id) then
                            local args = {
                                [1] = tostring(uid),
                                [2] = tonumber(savepet[petData.id].Rate),
                                [3] = petData._am or 1
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild(
                                "Booths_CreateListing")
                                :InvokeServer(
                                    unpack(args)
                                )
                            if game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_CreateListing")
                                :InvokeServer(unpack(args)) then
                                logplaza(petData.id, petRAP, tonumber(savepet[petData.id].Rate))
                            end
                            wait(1)
                        end
                    end
                else
                    if (tonumber(petRAP) > 1000) then
                        local args = {
                            [1] = tostring(uid),
                            [2] = math.floor(petRAP * getgenv().Setting["Rap Huge Normal"]),
                            [3] = petData._am or 1
                        }
                        if game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_CreateListing")
                            :InvokeServer(unpack(args)) then
                            logplaza(petData.id, petRAP, math.floor(petRAP * getgenv().Setting["Rap Huge Normal"]))
                        end
                        wait(1)
                    else
                        if savepet[petData.id] and savepet[petData.id].Rate and not table.find(getgenv().Setting["Skip Pet"], petData.id) then
                            local args = {
                                [1] = tostring(uid),
                                [2] = tonumber(savepet[petData.id].Rate),
                                [3] = petData._am or 1
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild(
                                "Booths_CreateListing")
                                :InvokeServer(
                                    unpack(args)
                                )
                            if game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_CreateListing")
                                :InvokeServer(unpack(args)) then
                                logplaza(petData.id, petRAP, tonumber(savepet[petData.id].Rate))
                            end
                            wait(1)
                        end
                    end
                end
            end
        end


        wait(1)
        for i, v in save.Get().Inventory do
            for i1, v1 in next, v do
                if getgenv().Setting["Custom Item"][v1.id] then
                    print(v1.id)
                    local petItem = Items.Types[i]:Get(i1)
                    local petRAP = petItem:GetRAP() or 0
                    local am = v1._am or 1
                    if am and am <= 5000 then
                        local args = {
                            [1] = tostring(i1),
                            [2] = math.floor(petRAP * getgenv().Setting["Custom Item"][v1.id]),
                            [3] = am or 1
                        }
                        --    print(math.floor(petRAP * getgenv().Setting["Custom Item"][v1.id]))
                        if game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_CreateListing")
                            :InvokeServer(unpack(args)) then
                            logplaza(v1.id, petRAP,
                                math.floor(petRAP * getgenv().Setting["Custom Item"][v1.id]))
                        end
                        wait(1)
                    else
                        local args = {
                            [1] = tostring(i1),
                            [2] = math.floor(petRAP * getgenv().Setting["Custom Item"][v1.id]),
                            [3] = 5000
                        }
                        --    print(math.floor(petRAP * getgenv().Setting["Custom Item"][v1.id]))
                        if game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_CreateListing")
                            :InvokeServer(unpack(args)) then
                            logplaza(v1.id, petRAP,
                                math.floor(petRAP * getgenv().Setting["Custom Item"][v1.id]))
                        end
                        wait(1)
                    end
                end
            end
        end
        wait(1)
        --//not huge
        local pets = {}

        for uid, petData in pairs(a) do
            for i1, v1 in pairs(save.Get().Inventory.Pet) do
                if not string.find(petData._id, "Huge") and tonumber(petData.difficulty) and tonumber(petData.difficulty) >= 1000000 and petData._id == v1.id then
                    table.insert(pets, { uid = i1, petData = petData, Amount = v1._am or 1 })
                end
            end
        end

        table.sort(pets, function(a, b)
            return a.petData.difficulty > b.petData.difficulty
        end)

        wait(1)
        for i, pet in ipairs(pets) do
            local petData = pet.petData
            local uid = pet.uid
            local petItem = Items.Types["Pet"]:Get(uid)
            local petRAP = petItem:GetRAP() or 0
            if pet.sh then
                if tonumber(petRAP) > 0 and not table.find(getgenv().Setting["Skip Pet"], petData.id) then
                    local args = {
                        [1] = tostring(uid),
                        [2] = math.floor(petRAP * getgenv().Setting["Rap Pet Normal"]),
                        [3] = petData._am or 1
                    }
                    if game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_CreateListing")
                        :InvokeServer(unpack(args)) then
                        logplaza(pet.id, petRAP,
                            math.floor(petRAP * getgenv().Setting["Rap Pet Normal"]))
                    end
                    wait(1)
                else
                    if savepet[petData.id] and savepet[petData.id].Rate and not table.find(getgenv().Setting["Skip Pet"], petData.id) then
                        local args = {
                            [1] = tostring(uid),
                            [2] = tonumber(savepet[petData.id].Rate),
                            [3] = petData._am or 1
                        }
                        if game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_CreateListing")
                            :InvokeServer(unpack(args)) then
                            logplaza(pet.id, petRAP, tonumber(savepet[petData.id].Rate))
                        end
                        wait(1)
                    end
                end
            end
        end
    end
end
