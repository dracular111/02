getgenv().gemsend = "20m"
getgenv().accountsend = "PopeSnail2801"
}
repeat
    wait()
until game:IsLoaded() and game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("GUIFX Holder") and
    game:GetService("Players").LocalPlayer.PlayerGui["GUIFX Holder"].DisplayOrder == 999
local rs = game:GetService("ReplicatedStorage")
local save = require(rs.Library.Client.Save)
local Items = require(game:GetService("ReplicatedStorage").Library.Items.Types)
local plr = game.Players.LocalPlayer
local RAP = 0
local a = require(game:GetService("ReplicatedStorage").Library.Directory.Pets)

local VirtualUser = game:service "VirtualUser"
game:service("Players").LocalPlayer.Idled:connect(
    function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end
)
if game.PlaceId == 18901165922 and game:GetService("Players").LocalPlayer:GetAttribute("TradingUnlocked") then
    local TeleportService = game:GetService("TeleportService")

    TeleportService:Teleport(19006211286)
end
if game.PlaceId == 19006211286 then
    function getnearboot()
        local pos
        local distance = math.huge
        local id = nil

        for i, v in next, workspace.TRADING.BoothSpawns:GetChildren() do
            local boothPosition = v.WorldPivot.Position
            local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position
            local currentDistance = (boothPosition - playerPosition).Magnitude

            if currentDistance < distance then
                distance = currentDistance
                pos = boothPosition
                id = v:GetAttribute("ID")
            end
        end
        return pos, id
    end

    local savepet = {}
    local v0 = {
        k = "e3",
        m = "e6",
        b = "e9",
        t = "e12",
        q = "e15"
    };
    ParseNumberSmart = function(v1)
        if type(v1) == "string" then
            v1 = v1:gsub("[,%s%c%z]", "");
            if #v1 > 0 then
                local v2 = v0[v1:sub(#v1):lower()];
                if v2 then
                    v1 = v1:sub(1, #v1 - 1) .. v2;
                end;
            end;
        end;
        return (tonumber(v1));
    end;
    for i, v in a do
        for i1, v1 in next, getgenv().data do
            if tonumber(v.difficulty) == ParseNumberSmart(i1) and not savepet[v._id] then
                savepet[v._id] = { Rate = ParseNumberSmart(v1) }
            end
        end
    end
    spawn(function()
        while wait() do
            for i, v in pairs(game:GetService("Players").LocalPlayer.PlayerGui._MACHINES.MailboxMachine.Frame.GiftsFrame.ItemsFrame:GetChildren()) do
                if v.ClassName == "Frame" then
                    local args = {
                        [1] = {
                            [1] = v.Name
                        }
                    }

                    game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Claim"):InvokeServer(unpack(
                        args))
                    wait(1)
                end
            end
        end
    end)
    local pos, id = getnearboot()

    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(pos + Vector3.new(-5, 5, 0))
    wait()

    local args = {
        [1] = tostring(id)
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_ClaimBooth"):InvokeServer(
        unpack(args)
    )
    wait(1)
    for i, v in next, workspace.__THINGS.Booths:GetChildren() do
        if v:GetAttribute("Owner") == plr.UserId then
            for i1, v1 in next, v.Pets.BoothTop.PetScroll:GetChildren() do
                if v1:IsA("Frame") then
                    local args = {
                        [1] = v1.Name
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_RemoveListing")
                        :InvokeServer(
                            unpack(args))
                end
            end
        end
    end
    spawn(function()
        while wait(15 * 60) do
            for i, v in next, workspace.__THINGS.Booths:GetChildren() do
                if v:GetAttribute("Owner") == plr.UserId then
                    for i1, v1 in next, v.Pets.BoothTop.PetScroll:GetChildren() do
                        if v1:IsA("Frame") then
                            local args = {
                                [1] = v1.Name
                            }

                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild(
                                "Booths_RemoveListing")
                                :InvokeServer(
                                    unpack(args))
                        end
                    end
                end
            end
        end
    end)
    spawn(function()
        while wait() do
            for i, v in pairs(save.Get().Inventory.Currency) do
                if v.id == "Diamonds" and v._am >= ParseNumberSmart(getgenv().gemsend) then
                    local args = {
                        [1] = getgenv().accountsend,
                        [2] = "Send Gem",
                        [3] = "Currency",
                        [4] = tostring(i),
                        [5] = ParseNumberSmart(getgenv().gemsend)
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send")
                        :InvokeServer(
                            unpack(args))
                end
            end
        end
    end)
    while wait() do
        for i, v in save.Get().Inventory.Consumable do
            local petItem = Items.Types["Consumable"]:Get(i)
            local petRAP = petItem:GetRAP() or 0
            if petRAP ~= 0 then
                local args = {
                    [1] = tostring(i),
                    [2] = math.floor(petRAP * (getgenv().RapPotion / 100)),
                    [3] = v._am
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_CreateListing")
                    :InvokeServer(
                        unpack(args)
                    )
            end
        end
        wait(1)
        --//huge
        for uid, petData in save.Get().Inventory.Pet do
            if string.find(petData.id, "Huge") then
                local petItem = Items.Types["Pet"]:Get(uid)

                local petRAP = petItem:GetRAP() or 0
                if (tonumber(petRAP) > 1000) then
                    local args = {
                        [1] = tostring(uid),
                        [2] = math.floor(petRAP * (getgenv().RapHuge / 100)),
                        [3] = petData._am
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_CreateListing")
                        :InvokeServer(
                            unpack(args)
                        )
                    wait(1)
                else
                    if savepet[petData.id] and savepet[petData.id].Rate then
                        print(uid, petData.id, petData._am)
                        local args = {
                            [1] = tostring(uid),
                            [2] = tonumber(savepet[petData.id].Rate),
                            [3] = petData._am
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_CreateListing")
                            :InvokeServer(
                                unpack(args)
                            )
                        wait(1)
                    end
                end
            end
        end
        wait(1)

        for i, v in save.Get().Inventory.Misc do
            local petItem = Items.Types["Misc"]:Get(i)
            local petRAP = petItem:GetRAP() or 0
            if petRAP ~= 0 then
                local args = {
                    [1] = tostring(i),
                    [2] = math.floor(petRAP * (getgenv().RAPmisc / 100)),
                    [3] = v._am
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_CreateListing")
                    :InvokeServer(
                        unpack(args)
                    )
            end
        end
        wait(1)
        --//not huge
        local pets = {}

        for uid, petData in pairs(a) do
            for i1, v1 in pairs(save.Get().Inventory.Pet) do
                if not string.find(petData._id, "Huge") and tonumber(petData.difficulty) >= 1000000 and petData._id == v1.id then
                    table.insert(pets, { uid = i1, petData = petData, Amount = v1._am or 1 })
                end
            end
        end

        table.sort(pets, function(a, b)
            return a.petData.difficulty > b.petData.difficulty
        end)
        for i, v in pets do
            print(v.petData._id, v.petData.difficulty, v.Amount)
        end

        for i, pet in ipairs(pets) do
            local petData = pet.petData
            local uid = pet.uid
            local petItem = Items.Types["Pet"]:Get(uid)
            local petRAP = petItem:GetRAP() or 0

            if tonumber(petRAP) > 0 then
                local args = {
                    [1] = tostring(uid),
                    [2] = math.floor(petRAP * (getgenv().RapSell / 100)),
                    [3] = petData._am
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_CreateListing")
                    :InvokeServer(unpack(args))
                wait(1)
            else
                if savepet[petData.id] and savepet[petData.id].Rate then
                    print(uid, petData.id, petData._am)
                    local args = {
                        [1] = tostring(uid),
                        [2] = tonumber(savepet[petData.id].Rate),
                        [3] = petData._am
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_CreateListing")
                        :InvokeServer(unpack(args))
                    wait(1)
                end
            end
        end
    end
end
